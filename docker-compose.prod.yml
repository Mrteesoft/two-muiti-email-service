version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: email_system_mongodb_prod
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: email_system
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-securepassword123}
    volumes:
      - mongodb_prod_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - email_system_prod_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache/Queue
  redis:
    image: redis:7.2-alpine
    container_name: email_system_redis_prod
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-securepassword123}
    volumes:
      - redis_prod_data:/data
    networks:
      - email_system_prod_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Service A - API Service
  service-a:
    build:
      context: ./service-a
      dockerfile: Dockerfile.prod
    container_name: email_system_api_prod
    restart: always
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD:-securepassword123}@mongodb:27017/email_system?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-securepassword123}@redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - email_system_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Service B - Worker Service
  service-b:
    build:
      context: ./service-b
      dockerfile: Dockerfile.prod
    container_name: email_system_worker_prod
    restart: always
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD:-securepassword123}@mongodb:27017/email_system?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-securepassword123}@redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - email_system_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: email_system_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - service-a
    networks:
      - email_system_prod_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  email_system_prod_network:
    driver: bridge
